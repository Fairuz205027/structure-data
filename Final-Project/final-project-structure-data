#include <bits/stdc++.h>
using namespace std;
#define V 11

int minDistance(int dist[],
                bool sptSet[])
{
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++)
        if (sptSet[v] == false &&
                   dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}

void codeName(int code) { 
    switch(code) {
        case 0: cout<<"Gang III no 5 lakarsantri ";
        break;
        case 1: cout<<" Toko Musik second rasa baru ";
        break;
        case 2: cout<<" SIOMAY Batagor Bandung Mama NENNY ";
        break;
        case 3: cout<<" Toko Sepatu ";
        break;
        case 4: cout<<" Donni cell ";
        break;
        case 5: cout<<" Brutal Sick Alliance ";
        break;
        case 6: cout<<" Bensin Suratno ";
        break;
        case 7: cout<<" Pasar Lakarsantri ";
        break;
        case 8: cout<<" Yoga Aki ";
        break;
        case 9: cout<<" Musholla Al-inayah ";
        break;
        case 10: cout<<" Kolam Pancing Waduk Lakarsantri ";
        break;
    }
}

void printPath(int parent[], int j)
{
    if (parent[j] == - 1)
        return;

    printPath(parent, parent[j]);
    printf("->");
    codeName(j);
}

void printSolution(int dist[], int n,
                      int parent[], int i)
{
    int src=0;
    printf("\nVertex: ");
    codeName(src);
    printf("->");
    codeName(i);
    printf("\nJarak: %d m", dist[i]);
    printf("\nRute: ");
    codeName(src);
    printPath(parent, i);
}

void dijkstra(int graph[V][V], int src, int dest)
{
    int dist[V];
    bool sptSet[V];
    int parent[V];
    for (int i = 0; i < V; i++)
    {
        parent[0] = -1;
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    dist[src] = 0;
    for (int count = 0; count < V - 1; count++)
    {
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;
        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] &&
                dist[u] + graph[u][v] < dist[v])
            {
                parent[v] = u;
                dist[v] = dist[u] + graph[u][v];
            }
    }
    printSolution(dist, V, parent, dest);
}

int main()
{
    int graph[V][V] = {{0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                       {90, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 50, 0, 111, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 111, 0, 85, 114, 0, 0, 0, 0, 0},
                        {0, 0, 0, 85, 0, 0, 0, 103, 0, 0, 0},
                        {0, 0, 0, 114, 0, 0, 55, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 55, 0, 32, 0, 0, 0},
                        {0, 0, 0, 0, 103, 0, 32, 0, 49, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 49, 0, 39, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 32},
                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0}
                    };
    printf("Daftar Codename Tempat\n0 = Gang III no 5 lakarsantri\n1 = Toko Musik second rasa baru\n2 = SIOMAY Batagor Bandung Mama NENNY\n3 = Toko Sepatu\n4 = Donni cell\n5 = Brutal Sick Alliance\n6 = Bensin Suratno\n7 = Pasar Lakarsantri\n8 = Yoga Aki\n9 = Musholla Al-inayah\n10 = Kolam Pancing Waduk Lakarsantri\n");
    printf("\nSource vertex (titik mulai) = Gang III no 5\n");
    int source=0;
    printf("Masukkan codename vertex destinasi (titik tujuan): ");
    int destination;
    scanf("%d",&destination);
    printf("\nBerikut merupakan shortest path dari Gang III no 5 ke");
    codeName(destination);
    dijkstra(graph, source, destination);
    return 0;
}
